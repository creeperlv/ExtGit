using ExtGit.Core.FileHash;
using ExtGit.Core.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace ExtGit.Core.Version1
{
    public class TraceIndex
    {
        public static readonly Version TraceVersion = new Version(1, 0, 0, 0);
        public string RelativeFilePath;
        public Dictionary<int, string> Chunks = new Dictionary<int, string>();
        public string FileHash;
        public FileInfo IndexFile;
        //private string RepoBase;
        private Repo Parent;
        TraceIndex()
        {

        }
        public TraceIndex(FileInfo IndexFile, Repo RepoBase)
        {
            this.IndexFile = IndexFile;
            Parent = RepoBase;
            LoadIndex();
        }
        public static TraceIndex Track(FileInfo TargetFile, Repo ParentRepo)
        {
            TraceIndex traceIndex = new TraceIndex();

            {
                traceIndex.RelativeFilePath = PathHelper.GetRelativePath(ParentRepo.RepoPath, TargetFile.FullName);
                traceIndex.FileHash = SHA256Hash.ComputeSHA256(TargetFile.FullName);
            }

            return traceIndex;
        }
        public void LoadIndex()
        {

        }
        public static TraceIndex TrackAndRecord(FileInfo TargetFile, Repo ParentRepo)
        {
            var T = Track(TargetFile, ParentRepo);
            var RandomName = Guid.NewGuid() + ".extgit-trace";
            var FileName = Path.Combine(ParentRepo.RepoPath, ".extgit", ".extgiconf", "Traces", RandomName);
            while (File.Exists(FileName) == true)
            {
                //If it happens that the generated guid is used, generate a new one.
                RandomName = Guid.NewGuid() + ".extgit-trace";
                FileName = Path.Combine(ParentRepo.RepoPath, ".extgit", ".extgiconf", "Traces", RandomName);
            }

            {
                //Save index.
                var NewContent = "#Generated by ExtGit.Core\r\n";
                NewContent += $"TraceVersion={TraceVersion}\r\n";
                NewContent += $"RelateiveFilePath={T.RelativeFilePath}\r\n";
                NewContent += $"FileHash={T.FileHash}\r\n";
                foreach (var item in T.Chunks)
                {
                    NewContent += $"Chunck.{item.Key}={item.Value}";
                }
                File.WriteAllText(FileName, NewContent);
            }
            return T;
        }
        public void CombineAndOverwrite()
        {
            var CurrentHash = SHA256Hash.ComputeSHA256(Path.Combine(Parent.RepoPath, RelativeFilePath));
            if (CurrentHash == FileHash)
            {
                //The file can be considered as 'same'.
                return;
            }
            else
            {
                var p = Path.Combine(Parent.RepoPath, RelativeFilePath);
                var FW = File.OpenWrite(p);
                for (int i = 0; i < Chunks.Count; i++)
                {
                    var f = Chunks[i];
                    var chunk = Path.Combine(Parent.RepoPath, ".extgit", ".extgitconf", "Traces", Path.GetFileNameWithoutExtension(IndexFile.FullName), f);
                    var FR = File.OpenRead(chunk);
                    byte[] CHUNK = new byte[128 * 1024];
                    int RL = 0;
                    while ((RL = FR.Read(CHUNK, 0, CHUNK.Length)) != 0)
                    {
                        FW.Write(CHUNK, 0, RL);
                        FW.Flush();
                    }
                    FR.Close();
                }
                FW.Close();
            }
        }
        public void DifferAndUpdate()
        {
            var CurrentHash = SHA256Hash.ComputeSHA256(Path.Combine(Parent.RepoPath, RelativeFilePath));
            if (CurrentHash == FileHash)
            {
                //The file can be considered as 'same'.
                return;
            }
            else
            {
                FileInfo f = new FileInfo(Path.Combine(Parent.RepoPath, RelativeFilePath));
                int ChunkID = 0;
                long ChunkMaxLength = Parent.MaxFileSize;
                var FR = f.OpenRead();
                byte[] ByteBlock = new byte[1024];//1KB.

                for (int i = 0; i < f.Length; i++)
                {
                    long Position = 0;
                    if (Chunks.ContainsKey(ChunkID))
                    {
                        int AP = 0;
                        //Locate Chunk File;
                        var FN = Chunks[i];
                        var TN = Path.GetFileNameWithoutExtension(IndexFile.Name);
                        var chunk = Path.Combine(Parent.RepoPath, ".extgit", ".extgitconf", "Traces", Path.GetFileNameWithoutExtension(IndexFile.FullName), FN);
                        var FW = File.OpenWrite(chunk);
                        while ((AP = FR.Read(ByteBlock, 0, ByteBlock.Length)) != 0)
                        {
                            {
                                FW.Write(ByteBlock,0,ByteBlock.Length);
                                FW.Flush();
                                //Write To File
                            }
                            Position += AP;
                            if (Position >= Parent.MaxFileSize)
                            {
                                break;
                            }
                        }
                        FW.Close();
                    }
                    else
                    {
                        //Create Chunk.

                        int AP = 0;
                        //Locate Chunk File;
                        var FN = Guid.NewGuid()+".Data-Chunk";
                        var TN = Path.GetFileNameWithoutExtension(IndexFile.Name);
                        var chunk = Path.Combine(Parent.RepoPath, ".extgit", ".extgitconf", "Traces", Path.GetFileNameWithoutExtension(IndexFile.FullName), FN);
                        var FW = File.OpenWrite(chunk);
                        while ((AP = FR.Read(ByteBlock, 0, ByteBlock.Length)) != 0)
                        {
                            {
                                FW.Write(ByteBlock, 0, ByteBlock.Length);
                                FW.Flush();
                                //Write To File
                            }
                            Position += AP;
                            if (Position >= Parent.MaxFileSize)
                            {
                                break;
                            }
                        }
                        FW.Close();
                        //When Chunk is written, the chunk will be add into index file.
                        Chunks.Add(i, FN);
                    }
                    
                }
                FR.Close();
                //Finalize, only when the file is different, index file will be updated.
                {
                    //Save index.
                    var NewContent = "#Generated by ExtGit.Core\r\n";
                    NewContent += $"TraceVersion={TraceVersion}\r\n";
                    NewContent += $"RelateiveFilePath={RelativeFilePath}\r\n";
                    NewContent += $"FileHash={FileHash}\r\n";
                    foreach (var item in Chunks)
                    {
                        NewContent += $"Chunck.{item.Key}={item.Value}";
                    }
                    File.WriteAllText(IndexFile.FullName, NewContent);
                }
            }
        }
    }
}
